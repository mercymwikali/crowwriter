// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins", "driverAdapters", "metrics"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model representing manager, writer, and admin
model User {
  id              String           @id @default(uuid())
  username        String
  email           String           @unique
  password        String           @unique
  role            Role             @default(writer)
  active          Boolean          @default(true)
  online          Boolean          @default(false) // New field to track online status
  profile         Profile?
  orders          Order[] // Remove the single relation and add an array of orders
  bids            Bid[]
  submittedOrders SubmittedOrder[]
  paymentRequests PaymentRequest[]
  payments        Payment[]
  fines           Fine[]
  notifications   Notification[]
  assignments     Assignment[] // Add a field to store assignments
}

// Payment status enum representing different payment statuses
enum Role {
  admin
  manager
  writer
}

// Profile model representing additional information about the user
model Profile {
  id       String    @id @default(uuid())
  bio      String?
  wallet   Float     @default(0)
  user     User      @relation(fields: [userId], references: [id])
  userId   String    @unique
  Payments Payment[]
}

// Order model representing the orders created by the manager
model Order {
  id              String           @id @default(uuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  orderId         String           @unique
  topic           String
  discipline      String
  service         String
  description     String // New field: Description
  format          String
  noOfPages       Int
  costPerPage     Float            @default(0.00)
  fullAmount      Float            @default(0.00)
  deadline        DateTime
  remainingTime   String
  status          OrderStatus      @default(PENDING)
  writer          User[] // Change to array of users
  submittedOrders SubmittedOrder[]
  bids            Bid[]
  payments        Payment[]
  paymentRequests PaymentRequest[]
  fines           Fine[]
  assignments     Assignment[] // Add a field to store assignments
  documentId      String?
  Notification    Notification[]

  @@index([orderId, topic])
}

// Order status enum
enum OrderStatus {
  PENDING
  ASSIGNED
  SUBMITTED
  CANCELLED
  BIDDED
}

// Bid model representing bids made by writers on orders
model Bid {
  id       String      @id @default(uuid())
  order    Order       @relation(fields: [orderId], references: [id])
  orderId  String
  writer   User        @relation(fields: [writerId], references: [id])
  writerId String
  status   OrderStatus
}

// Assignment model representing the assignment of orders to users
model Assignment {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

// SubmittedOrder model representing orders submitted by writers
model SubmittedOrder {
  id             String      @id @default(uuid())
  order          Order       @relation(fields: [orderId], references: [id])
  orderId        String
  submittedBy    User        @relation(fields: [submittedById], references: [id])
  submittedById  String
  submissionDate DateTime
  status         OrderStatus
  documentId     String?

  @@index([orderId, submittedById])
}

// PaymentRequest model representing payment requests made by writers
// PaymentRequest model representing payment requests made by writers
model PaymentRequest {
  id            String               @id @default(uuid())
  order         Order                @relation(fields: [orderId], references: [id])
  orderId       String
  requestedBy   User                 @relation(fields: [requestedById], references: [id])
  requestedById String
  amount        Int
  paymentStatus PaymentRequestStatus @default(PENDING)
  invoiceNumber String
  createdAt     DateTime
  updatedAt     DateTime
  finedOrders   Fine[]              
}


// Payment request status enum representing different payment request statuses
enum PaymentRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

// Payment model representing payments made to writers for completed orders
model Payment {
  id          String        @id @default(uuid())
  order       Order         @relation(fields: [orderId], references: [id])
  orderId     String
  paidTo      User          @relation(fields: [paidToId], references: [id])
  paidToId    String
  amount      Int
  status      PaymentStatus @default(UNPAID)
  orderStatus OrderStatus
  wallet      Profile       @relation(fields: [walletId], references: [id])
  walletId    String

  @@index([paidToId, orderStatus])
}

// Payment status enum representing different payment statuses
enum PaymentStatus {
  PAID
  UNPAID
}

// Fine model representing fines for orders
model Fine {
  id               String        @id @default(uuid())
  createdAt        DateTime      @default(now())
  order            Order         @relation(fields: [orderId], references: [id])
  orderId          String
  finedTo          User          @relation(fields: [finedToId], references: [id])
  finedToId        String
  amount           Int
  reason           String
  paymentRequest   PaymentRequest? @relation(fields: [paymentRequestId], references: [id]) // Add this field
  paymentRequestId String?        // Add this field
}

model Notification {
  id          String           @id @default(uuid())
  createdAt   DateTime         @default(now())
  order       Order            @relation(fields: [orderId], references: [id])
  orderId     String
  type        NotificationType
  message     String
  recipient   User             @relation(fields: [recipientId], references: [id])
  recipientId String
  read        Boolean          @default(false)
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  CUSTOM
}
